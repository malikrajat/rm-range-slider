{"version":3,"file":"rm-range-slider.mjs","sources":["../../../projects/rm-range-slider/src/lib/rm-range-slider.component.ts","../../../projects/rm-range-slider/src/public-api.ts","../../../projects/rm-range-slider/src/rm-range-slider.ts"],"sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  numberAttribute,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { Subject, takeUntil, throttleTime } from 'rxjs';\nexport interface MINMAX {\n  from: number;\n  to: number;\n}\n\n@Component({\n    selector: 'rm-range-slider',\n    imports: [MatSliderModule, FormsModule],\n    template: `\n    <mat-slider\n      [min]=\"this.min\"\n      [max]=\"this.max\"\n      showTickMarks\n      discrete\n      [displayWith]=\"formatLabel\"\n      (change)=\"onSliderInput()\"\n    >\n      <input matSliderStartThumb [(ngModel)]=\"startValue\" />\n      <input matSliderEndThumb [(ngModel)]=\"endValue\" />\n    </mat-slider>\n  `,\n    styles: `\n    mat-slider {\n      width: 100%;\n    }\n  `\n})\nexport class RmRangeSliderComponent implements OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  /* The `@Input` decorator in the TypeScript code snippet is used to define an input property for the\n`RmRangeSliderComponent` component in Angular. In this specific case: */\n  @Input({\n    required: true,\n    transform: numberAttribute,\n  })\n  startValue: number = 0;\n\n  /* The `@Input` decorator in the TypeScript code snippet is used to define an input property for the\n`RmRangeSliderComponent` component in Angular. In this specific case, the `endValue` property is\nbeing defined as an input property with the following configuration: */\n  @Input({\n    required: true,\n    transform: numberAttribute,\n  })\n  endValue: number = 10;\n\n  /* The `@Input` decorator in the TypeScript code snippet is used to define an input property for the\n`RmRangeSliderComponent` component in Angular. In this specific case, the `min` property is being\ndefined as an input property with the following configuration: */\n  @Input({\n    required: true,\n    transform: numberAttribute,\n  })\n  min: number = 0;\n\n  /* The `@Input` decorator in the TypeScript code snippet is used to define an input property for the\n`RmRangeSliderComponent` component in Angular. In this specific case, the `max` property is being\ndefined as an input property with the following configuration: */\n  @Input({\n    required: true,\n    transform: numberAttribute,\n  })\n  max: number = 100;\n\n  /* The `@Output()` decorator in the TypeScript code snippet is used to define an output property for\nthe `RmRangeSliderComponent` component in Angular. In this specific case, the `getMinMax` property\nis being defined as an output property with the type of `EventEmitter<MINMAX>`. */\n  @Output()\n  public onValueChanged = new EventEmitter<MINMAX>();\n\n  /**\n   * The `onSliderInput` function sets the `value` object with `startValue` and `endValue` properties and\n   * calls the `onSliderChange` function with this value.\n   */\n  onSliderInput(): void {\n    const value: MINMAX = {\n      from: this.startValue,\n      to: this.endValue,\n    };\n    this.onSliderChange(value);\n  }\n\n  /**\n   * The `formatLabel` function in TypeScript formats a number value by rounding it to the nearest\n   * hundredth and appending a 'k' if the value is greater than or equal to 1000.\n   * @param {number} value - The `value` parameter is a number that represents a numerical value which\n   * needs to be formatted. The `formatLabel` function takes this number as input and returns a formatted\n   * string representation of the number. If the value is greater than or equal to 1000, it will be\n   * rounded and displayed in\n   * @returns If the `value` is greater than or equal to 1000, the function will return the value divided\n   * by 100 and rounded, followed by the letter 'k'. Otherwise, it will return the value as a string.\n   */\n\n  formatLabel(value: number): string {\n    if (value >= 1000) {\n      return Math.round(value / 100) + 'k';\n    }\n    return `${value}`;\n  }\n\n  /**\n   * The `onSliderChange` function in TypeScript sets up a Subject to emit slider value changes with a\n   * throttle time of 5000 milliseconds.\n   * @param {MINMAX} value - The `value` parameter in the `onSliderChange` method represents the current\n   * value of the slider, which is of type `MINMAX`.\n   */\n  onSliderChange(value: MINMAX): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    const sliderValueChanges$ = new Subject<MINMAX>();\n    sliderValueChanges$\n      .pipe(throttleTime(5000), takeUntil(this.destroy$))\n      .subscribe((newValue: MINMAX) => {\n        this.onValueChanged.emit(newValue);\n      });\n    sliderValueChanges$.next(value);\n  }\n\n  /**\n   * The ngOnDestroy function in TypeScript is used to clean up resources and unsubscribe from\n   * observables by completing a subject.\n   */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/*\n * Public API Surface of rm-range-slider\n */\n\nexport * from './lib/rm-range-slider.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}