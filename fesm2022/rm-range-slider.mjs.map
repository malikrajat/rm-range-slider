{"version":3,"file":"rm-range-slider.mjs","sources":["../../../projects/rm-range-slider/src/lib/rm-range-slider.component.ts","../../../projects/rm-range-slider/src/lib/rm-range-slider.component.html","../../../projects/rm-range-slider/src/lib/rm-range-slider.module.ts","../../../projects/rm-range-slider/src/public-api.ts","../../../projects/rm-range-slider/src/rm-range-slider.ts"],"sourcesContent":["import {\r\n\tAfterViewInit,\r\n\tComponent,\r\n\tElementRef,\r\n\tEventEmitter,\r\n\tInput,\r\n\tOnInit,\r\n\tOutput,\r\n\tRenderer2,\r\n\tSimpleChanges,\r\n\tViewChild,\r\n} from '@angular/core'\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\r\nimport { interval, Subject, takeUntil } from 'rxjs'\r\nimport { MINMAX } from './rm-range-slider.component.interface'\r\n\r\n@Component({\r\n\tselector: 'rm-range-slider',\r\n\ttemplateUrl: './rm-range-slider.component.html',\r\n\tstyleUrls: ['./rm-range-slider.component.scss'],\r\n})\r\nexport class RmRangeSliderComponent implements OnInit, AfterViewInit {\r\n\tpublic slider!: FormGroup\r\n\t@Input('SliderMinRange') min: number = 0\r\n\t@Input('SliderMaxRange') max: number = 100\r\n\t@Input('setMinValue') setMinValue: number = 0\r\n\t@Input('disabled') disabled: boolean = false\r\n\t@Input('showToolTip') showToolTip: boolean = false\r\n\t@Input('setMaxValue') setMaxValue: number = 100\r\n\t@Input('showScale') showScale: boolean = false\r\n\t@Input('doubleSlider') doubleSlider: boolean = true\r\n\t@Input('toolTipColor') toolTipColor: string = '#8a00e5'\r\n\t@Input('toolTipColorHover') toolTipColorHover: string = '#8a00e5'\r\n\t@Input('toolTipColorHoverShadow') toolTipColorHoverShadow: string = '#8a00e5'\r\n\t@Input('rangeColor') rangeColor: string = 'rgba(255,255,255,0.99)'\r\n\t@Input('sliderColor') sliderColor: string = 'rgba(255,255,255,0.47)'\r\n\t@Input('sliderColorRight') sliderColorRight: string = 'rgb(198, 198, 198)'\r\n\t@Output('onValueChanged') onValueChanged: EventEmitter<MINMAX> = new EventEmitter()\r\n\t@ViewChild('toSliders', { static: false }) toSliders!: ElementRef\r\n\t@ViewChild('fromSlider', { static: false }) fromSlider!: ElementRef\r\n\t@ViewChild('toSliderToolTip', { read: ElementRef }) toSliderToolTip!: ElementRef\r\n\t@ViewChild('fromSliderToolTip', { read: ElementRef }) fromSliderToolTip!: ElementRef\r\n\tprivate gradient!: string\r\n\tprivate destroyed$: Subject<void> = new Subject<void>()\r\n\r\n\t/**\r\n\t * The constructor function is a special function that is called when a new instance of the class is created\r\n\t * @param {FormBuilder} fb - FormBuilder - This is the FormBuilder service that we'll use to create our form.\r\n\t * @param {Renderer2} renderer - Renderer2 - This is the Angular Renderer2 service. It's used to manipulate the DOM.\r\n\t */\r\n\tconstructor(private readonly fb: FormBuilder, private renderer: Renderer2) {}\r\n\r\n\t/**\r\n\t * It creates a form.\r\n\t */\r\n\tngOnInit() {\r\n\t\tthis.#createFrom()\r\n\t}\r\n\r\n\t/**\r\n\t * A lifecycle hook that is called after a component's view has been fully initialized.\r\n\t */\r\n\tngAfterViewInit() {\r\n\t\tthis.#fillSlider('fromSlider', 'toSlider')\r\n\t\tthis.#setToggleAccessible()\r\n\t\tthis.#disabledSlider(this.disabled)\r\n\t}\r\n\r\n\t/**\r\n\t * When the component is destroyed, we want to complete the observable and let any subscribers know that the observable is\r\n\t * complete.\r\n\t */\r\n\tngOnDestroy(): void {\r\n\t\tthis.destroyed$.next()\r\n\t\tthis.destroyed$.complete()\r\n\t}\r\n\r\n\t/**\r\n\t * If the changes object has a property called disabled and it's not the first change and the current value is true, then\r\n\t * call the #disabledSlider function with the current value of the disabled property\r\n\t * @param {SimpleChanges} changes - SimpleChanges - this is the object that contains the changes that have been made to\r\n\t * the component.\r\n\t */\r\n\tngOnChanges(changes: SimpleChanges): void {\r\n\t\tif (changes && changes['disabled'] && !changes['disabled'].firstChange && changes['disabled'].currentValue) {\r\n\t\t\tthis.#disabledSlider(changes['disabled'].currentValue)\r\n\t\t}\r\n\t\tif (\r\n\t\t\tchanges &&\r\n\t\t\tchanges['setMinValue'] &&\r\n\t\t\t!changes['setMinValue'].firstChange &&\r\n\t\t\tchanges['setMinValue'].currentValue\r\n\t\t) {\r\n\t\t\tthis.slider.patchValue({\r\n\t\t\t\tfromSlider: changes['setMinValue'].currentValue,\r\n\t\t\t})\r\n\t\t}\r\n\t\tif (\r\n\t\t\tchanges &&\r\n\t\t\tchanges['setMaxValue'] &&\r\n\t\t\t!changes['setMaxValue'].firstChange &&\r\n\t\t\tchanges['setMaxValue'].currentValue\r\n\t\t) {\r\n\t\t\tthis.slider.patchValue({\r\n\t\t\t\ttoSlider: changes['setMaxValue'].currentValue,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * It's a function that takes a string as an argument and if the showToolTip property is true, it calls the\r\n\t * fromSliderToolTipPosition() or toSliderToolTipPosition() function depending on the value of the string argument\r\n\t * @param {string} slideType - string - This is the type of slider that is being moved. It can be either 'from' or 'to'.\r\n\t */\r\n\tfireEventOnInput(slideType: string) {\r\n\t\tif (this.showToolTip) {\r\n\t\t\tif (slideType === 'from') {\r\n\t\t\t\tthis.fromSliderToolTipPosition()\r\n\t\t\t}\r\n\t\t\tif (slideType === 'to') {\r\n\t\t\t\tthis.toSliderToolTipPosition()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * We're calculating the position of the tooltip based on the value of the slider\r\n\t */\r\n\tfromSliderToolTipPosition() {\r\n\t\tconst val = this.slider.get('fromSlider')?.value\r\n\t\tconst min = this.min ? this.min : 0\r\n\t\tconst max = this.max ? this.max : 100\r\n\t\tconst newVal = Number(((val - min) * 100) / (max - min))\r\n\t\tthis.fromSliderToolTip.nativeElement.style.left = `calc(${newVal}% + (${-6 - newVal * 0.4}px))`\r\n\t}\r\n\r\n\t/**\r\n\t * The function takes the value of the toSlider and converts it to a percentage value that is used to position the\r\n\t * toSliderToolTip\r\n\t */\r\n\t/**\r\n\t * The function takes the value of the toSlider and converts it to a percentage value that is used to position the\r\n\t * toSliderToolTip\r\n\t */\r\n\ttoSliderToolTipPosition() {\r\n\t\tconst toSlider = this.slider.get('toSlider')?.value\r\n\t\tconst y = 0.8875 * toSlider + 3.985\r\n\t\tthis.toSliderToolTip.nativeElement.style.left = y + '%'\r\n\t}\r\n\r\n\t/**\r\n\t * We're getting the values of the two sliders, and then emitting an event with those values\r\n\t */\r\n\tfireEventOnChange() {\r\n\t\tconst toSlider = this.slider.get('toSlider')?.value\r\n\t\tconst fromSlider = this.slider.get('fromSlider')?.value\r\n\t\tconst maxMin = {\r\n\t\t\tmin: fromSlider,\r\n\t\t\tmax: toSlider,\r\n\t\t}\r\n\t\tthis.onValueChanged.emit(maxMin)\r\n\t}\r\n\r\n\t/**\r\n\t * The function creates a form group with two form controls, one for the minimum value and one for the maximum value\r\n\t */\r\n\t#createFrom() {\r\n\t\tthis.slider = this.fb.group({\r\n\t\t\tfromSlider: [this.setMinValue, [Validators.required, Validators.max(this.max), Validators.min(this.min)]],\r\n\t\t\ttoSlider: [this.setMaxValue, [Validators.required, Validators.max(this.max), Validators.min(this.min)]],\r\n\t\t})\r\n\t\tthis.#onFormValueChange()\r\n\t}\r\n\r\n\t/**\r\n\t * The function subscribes to the valueChanges of the fromSlider and toSlider.\r\n\t *\r\n\t * The fromSlider is the slider on the left and the toSlider is the slider on the right.\r\n\t *\r\n\t * The function is called onFormValueChange() because it is called in the ngOnInit() function.\r\n\t *\r\n\t * The ngOnInit() function is called when the component is initialized.\r\n\t *\r\n\t * The function is called onFormValueChange() because it is called in the ngOnInit() function.\r\n\t *\r\n\t * The ngOnInit() function is called when the component is initialized.\r\n\t *\r\n\t * The function is called onFormValueChange() because it is called in the ngOnInit() function.\r\n\t *\r\n\t * The ngOnInit() function is called when the component is initialized.\r\n\t *\r\n\t * The function is called onFormValueChange() because it is called in the ngOnInit() function.\r\n\t *\r\n\t * The ngOnInit\r\n\t */\r\n\t#onFormValueChange() {\r\n\t\tthis.slider.get('fromSlider')?.valueChanges.subscribe(() => {\r\n\t\t\tconst fromSlider = this.slider.get('fromSlider')?.value\r\n\t\t\tif (this.fromSliderToolTip) {\r\n\t\t\t\tthis.fromSliderToolTip.nativeElement.innerHTML = `<span>${fromSlider}</span>`\r\n\t\t\t}\r\n\t\t\tthis.#controlFromSlider('fromSlider', 'toSlider')\r\n\t\t})\r\n\t\tthis.slider.get('toSlider')?.valueChanges.subscribe(() => {\r\n\t\t\tthis.#controlToSlider('fromSlider', 'toSlider')\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * If the value of the fromSlider is greater than the value of the toSlider, then the value of the fromSlider is set to\r\n\t * the value of the toSlider\r\n\t * @param {string} fromSlider - the name of the from slider\r\n\t * @param {string} toSlider - string - the name of the toSlider control\r\n\t */\r\n\t#controlFromSlider(fromSlider: string, toSlider: string) {\r\n\t\tconst [from, to] = this.#getParsed('fromSlider', 'toSlider')\r\n\t\tthis.#fillSlider(fromSlider, toSlider)\r\n\t\tif (from > to) {\r\n\t\t\tthis.slider.patchValue({\r\n\t\t\t\tfromSlider: to,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * > If the value of the `fromSlider` is less than or equal to the value of the `toSlider`, then set the value of the\r\n\t * `toSlider` to the value of the `toSlider`. Otherwise, set the value of the `toSlider` to the value of the `fromSlider`\r\n\t * @param {string} fromSlider - The name of the slider that is being changed.\r\n\t * @param {string} toSlider - The name of the slider that is being changed.\r\n\t */\r\n\t#controlToSlider(fromSlider: string, toSlider: string) {\r\n\t\tconst [from, to] = this.#getParsed('fromSlider', 'toSlider')\r\n\t\tthis.#fillSlider(fromSlider, toSlider)\r\n\t\tthis.#setToggleAccessible()\r\n\t\tif (from <= to) {\r\n\t\t\tthis.slider.patchValue({\r\n\t\t\t\ttoSlider: to,\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t/**\r\n\t\t\t * We're taking the values of the two inputs, calculating the percentage of the slider that should be filled, and then\r\n\t\t\t * setting the background of the slider to a gradient that fills the slider to the appropriate percentage\r\n\t\t\t * @param {string} fromC - string - the name of the form control for the left slider\r\n\t\t\t * @param {string} toC - string - the color of the slider\r\n\t\t\t */\r\n\t\t\tthis.slider.patchValue({\r\n\t\t\t\ttoSlider: from,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * It returns the value of the form field that is passed in as a parameter\r\n\t * @param {string} fromC - The name of the form field that contains the value of the left slider.\r\n\t * @param {string} toC - The name of the form field that contains the value of the right slider.\r\n\t */\r\n\t#fillSlider(fromC: string, toC: string) {\r\n\t\tconst from = this.#getFormValue(fromC)\r\n\t\tconst to = this.#getFormValue(toC)\r\n\t\tconst sliderColor = this.sliderColor\r\n\t\tconst rangeColor = this.rangeColor\r\n\t\tconst rangeDistance = this.max - this.min\r\n\t\tconst fromPosition = this.doubleSlider ? from - this.min : this.min\r\n\t\tconst toPosition = to - this.min\r\n\t\tthis.gradient = `linear-gradient(\r\n    to right,\r\n    ${sliderColor} 0%,\r\n    ${sliderColor} ${(fromPosition / rangeDistance) * 100}%,\r\n    ${rangeColor} ${(fromPosition / rangeDistance) * 100}%,\r\n /**\r\n\t * It returns the value of the form field that is passed in as a parameter\r\n\t * @param {string} FormField - The name of the form field you want to get the value of.\r\n\t * @returns The value of the form field.\r\n\t */\r\n\t   ${rangeColor} ${(toPosition / rangeDistance) * 100}%,\r\n    ${this.sliderColorRight} ${(toPosition / rangeDistance) * 100}%,\r\n    ${this.sliderColorRight} 100%)`\r\n\t\tthis.renderer.setStyle(this.toSliders.nativeElement, 'background', this.gradient)\r\n\t}\r\n\r\n\t/**\r\n\t * It returns the value of the form field that is passed in as a parameter\r\n\t * @param {string} FormField - The name of the form field you want to get the value of.\r\n\t * @returns The value of the form field.\r\n\t */\r\n\t#getFormValue(FormField: string) {\r\n\t\treturn this.slider.get(FormField)?.value\r\n\t}\r\n\r\n\t/**\r\n\t * If the value of the slider is less than or equal to 0, then set the z-index of the slider to 2, otherwise set it to 0\r\n\t */\r\n\t#setToggleAccessible() {\r\n\t\tconst currentTarget = this.slider.get('toSlider')?.value\r\n\t\tif (Number(currentTarget.value) <= 0) {\r\n\t\t\tthis.renderer.setStyle(this.toSliders.nativeElement, 'zIndex', 2)\r\n\t\t} else {\r\n\t\t\tthis.renderer.setStyle(this.toSliders.nativeElement, 'zIndex', 0)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * It takes two strings, and returns an array of two numbers\r\n\t * @param {string} currentFrom - string - The name of the input that holds the \"from\" value\r\n\t * @param {string} currentTo - string - the name of the input that holds the value of the right slider\r\n\t * @returns An array of two numbers.\r\n\t */\r\n\t#getParsed(currentFrom: string, currentTo: string): any {\r\n\t\tconst from = parseInt(this.slider.get(currentFrom)?.value, 10)\r\n\t\tconst to = parseInt(this.slider.get(currentTo)?.value, 10)\r\n\t\treturn [from, to]\r\n\t}\r\n\r\n\t/**\r\n\t * It disables the slider and changes the color of the thumb to gray\r\n\t * @param {boolean} isDisabled - boolean - true if the slider is disabled, false if it's enabled\r\n\t */\r\n\t#disabledSlider(isDisabled: boolean): void {\r\n\t\tinterval(1)\r\n\t\t\t.pipe(takeUntil(this.destroyed$))\r\n\t\t\t.subscribe(() => {\r\n\t\t\t\tif (this.doubleSlider) {\r\n\t\t\t\t\tthis.fromSlider.nativeElement.disabled = isDisabled\r\n\t\t\t\t\tthis.fromSliderToolTipPosition()\r\n\t\t\t\t}\r\n\t\t\t\tthis.toSliders.nativeElement.disabled = isDisabled\r\n\t\t\t\tthis.toSliderToolTipPosition()\r\n\t\t\t\tthis.#changeThumbColorOnDisabled()\r\n\t\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * If the slider is disabled, set the tooltip color to #dddddd and the tooltip hover color to #dddddd and the tooltip\r\n\t * hover shadow to none\r\n\t */\r\n\t#changeThumbColorOnDisabled(): void {\r\n\t\tif (this.disabled) {\r\n\t\t\tthis.toolTipColor = '#dddddd'\r\n\t\t\tthis.toolTipColorHover = '#dddddd'\r\n\t\t\tthis.toolTipColorHoverShadow = 'none'\r\n\t\t}\r\n\r\n\t\tif (this.fromSliderToolTip) {\r\n\t\t\tthis.renderer.setStyle(this.fromSliderToolTip.nativeElement, 'background-color', this.toolTipColor)\r\n\t\t\tthis.fromSliderToolTip.nativeElement.style.setProperty('--tooltip-arrow', this.toolTipColor)\r\n\t\t}\r\n\t\tif (this.toSliderToolTip) {\r\n\t\t\tthis.renderer.setStyle(this.toSliderToolTip.nativeElement, 'background-color', this.toolTipColor)\r\n\t\t\tthis.toSliderToolTip.nativeElement.style.setProperty('--tooltip-arrow', this.toolTipColor)\r\n\t\t}\r\n\r\n\t\tif (this.fromSlider) {\r\n\t\t\tthis.fromSlider.nativeElement.style.setProperty('--slider-thumb-color', this.toolTipColor)\r\n\t\t\tthis.fromSlider.nativeElement.style.setProperty('--slider-thumb-color-hover', this.toolTipColorHover)\r\n\t\t\tthis.fromSlider.nativeElement.style.setProperty(\r\n\t\t\t\t'--slider-thumb-color-hover-shadow',\r\n\t\t\t\tthis.toolTipColorHoverShadow,\r\n\t\t\t)\r\n\t\t}\r\n\t\tif (this.toSliders) {\r\n\t\t\tthis.toSliders.nativeElement.style.setProperty('--slider-thumb-color', this.toolTipColor)\r\n\t\t\tthis.toSliders.nativeElement.style.setProperty('--slider-thumb-color-hover', this.toolTipColorHover)\r\n\t\t\tthis.toSliders.nativeElement.style.setProperty(\r\n\t\t\t\t'--slider-thumb-color-hover-shadow',\r\n\t\t\t\tthis.toolTipColorHoverShadow,\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n","<form [formGroup]=\"slider\" novalidate>\r\n\t<div class=\"range_container\">\r\n\t\t<div class=\"sliders_control\">\r\n\t\t\t<input\r\n\t\t\t\t#fromSlider\r\n\t\t\t\t(change)=\"fireEventOnChange()\"\r\n\t\t\t\t(input)=\"fireEventOnInput('from')\"\r\n\t\t\t\t*ngIf=\"doubleSlider\"\r\n\t\t\t\t[max]=\"max\"\r\n\t\t\t\t[min]=\"min\"\r\n\t\t\t\tclass=\"from-slider range\"\r\n\t\t\t\tformControlName=\"fromSlider\"\r\n\t\t\t\tid=\"fromSlider\"\r\n\t\t\t\tstep=\"1\"\r\n\t\t\t\ttype=\"range\"\r\n\t\t\t/>\r\n\r\n\t\t\t<ng-container *ngIf=\"showToolTip\">\r\n\t\t\t\t<div #fromSliderToolTip *ngIf=\"doubleSlider\" class=\"tooltip\" id=\"rangeFrom\">\r\n\t\t\t\t\t{{ slider.get('fromSlider')?.value }}\r\n\t\t\t\t</div>\r\n\t\t\t</ng-container>\r\n\r\n\t\t\t<input\r\n\t\t\t\t#toSliders\r\n\t\t\t\t(change)=\"fireEventOnChange()\"\r\n\t\t\t\t(input)=\"fireEventOnInput('to')\"\r\n\t\t\t\t[max]=\"max\"\r\n\t\t\t\t[min]=\"min\"\r\n\t\t\t\tclass=\"toSlider range\"\r\n\t\t\t\tformControlName=\"toSlider\"\r\n\t\t\t\tid=\"toSlider\"\r\n\t\t\t\tstep=\"1\"\r\n\t\t\t\ttype=\"range\"\r\n\t\t\t/>\r\n\t\t\t<div #toSliderToolTip *ngIf=\"showToolTip\" class=\"toSliderTooltip\" id=\"rangeTo\">\r\n\t\t\t\t{{ slider.get('toSlider')?.value }}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n","import { NgModule } from '@angular/core'\r\nimport { RmRangeSliderComponent } from './rm-range-slider.component'\r\nimport { ReactiveFormsModule } from '@angular/forms'\r\nimport { CommonModule } from '@angular/common'\r\n\r\n@NgModule({\r\n\tdeclarations: [RmRangeSliderComponent],\r\n\timports: [ReactiveFormsModule, CommonModule],\r\n\texports: [RmRangeSliderComponent],\r\n})\r\nexport class RmRangeSliderModule {}\r\n","/*\r\n * Public API Surface of rm-range-slider\r\n */\r\n\r\nexport * from './lib/rm-range-slider.component'\r\nexport * from './lib/rm-range-slider.module'\r\nexport * from './lib/rm-range-slider.component.interface'\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}